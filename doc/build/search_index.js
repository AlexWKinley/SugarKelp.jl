var documenterSearchIndex = {"docs":
[{"location":"functions.html#Function-Documentation","page":"Function Documentation","title":"Function Documentation","text":"","category":"section"},{"location":"functions.html","page":"Function Documentation","title":"Function Documentation","text":"Modules = [Kelp]\nOrder = [:function, :type]","category":"page"},{"location":"functions.html#Main.Kelp.defaults-Tuple{Any, Any, Any}","page":"Function Documentation","title":"Main.Kelp.defaults","text":"Kelp.defaults(t_i, t_e, u)\n\nGenerates \"default\" or anayltical values for the water speed, temperature, irradiance and external nitrogen for testing.\n\nParameters:\n\nt_i: start time\nt_e: end time\nu: your chosen water speed\n\n\n\n\n\n","category":"method"},{"location":"functions.html#Main.Kelp.equations!-Tuple{Any, Any, Any}","page":"Function Documentation","title":"Main.Kelp.equations!","text":"Kelp.equations!(y, params, t)\n\nEquations outlined in the Main Equations section of the paper to be solved by the ODE library.\n\ny: the current state of the system as a vector (area, nitrate reserve, carbon reserve).\nparams: the variable parameters of the model:\nu_arr: interpolation object of the water speed in time\ntemp_arr: interpolation object of the temperature in time\nirr_arr: interpolation object of the irradianec in time\nex_n_arr: interpolation object of the external nitrate concentration in time\nNormDeltaL: the normalised change in day length\nresp_model: the choice of respiration model, 1 is the origional from the 2012 paper and 2 is the modified version in 2013\ndt: the time step length, this is important as it is used in the \"extreme carbon limit\" part of the equations, see NB.\nt: the current time (with respect to the time in the interpolations)\n\nNote: These equations must be solved with an algorithm with fixed time steps and known, constant sub timestep lengths. This is because the \"extreme carbon limit\" element is only implientable with known and fixed timesteps as the value of a  must be changed to a particular value rather than changing the deriviative. This can only be done (within the framework of the ODE library) by setting the derivitive to (X(next)-X(old))/dt\n\n\n\n\n\n","category":"method"},{"location":"functions.html#Main.Kelp.solvekelp","page":"Function Documentation","title":"Main.Kelp.solvekelp","text":"Kelp.solvekelp(t_i, nd, u, temp, irr, ex_n, lat, a_0, n_0, c_0, params=\"src/parameters/origional.jl\", resp_model=1, dt=1)\n\nSolves the model for some set of parametetrs and returns the ODE library solution as well as a dataframe of the useful results.\n\nParameters:\n\nt_i: th estart time (in days since the start of the interpolation objects \"day zero\")\nnd: the number of days to run for\nu: interpolation object (IO) of water speed\ntemp: IO of temperature\nex_n: IO of external nitrate concentration\nlat: latitude, relivant for the change of day length\na_0: initial area\nn_0: initial nitrogen reserve (gN/gSW)\nc_0: initial carbon reserve (gC/gSW)\nparams: string of the path to a parameters file, defaults to the 2012 values. Also supplied is 2013 in src/parameters/2013.jl or you can copy and vary them\nresp_model: choice of respiration model, 1 (default) uses the 2012 version and 2 uses the modifcations from the 2013 paper\ndt: the time step size to use (see equations! note), default is 1 day (seems small enough)\n\nReturns:\n\nsolution: the ODE library solution\nresults: dataframe of area/nitrogen reserve/carbon reserve/total nitrate update. All others useful quantities can be easily derived.\n\n\n\n\n\n","category":"function"},{"location":"index.html#Kelp.jl","page":"Index","title":"Kelp.jl","text":"","category":"section"},{"location":"index.html","page":"Index","title":"Index","text":"Kelp.jl is an implementation of the sugar kelp growth model from Broch and Slagstad model of the growth and composition of Saccharina latissima  Kelp.","category":"page"},{"location":"index.html#Contents","page":"Index","title":"Contents","text":"","category":"section"},{"location":"index.html","page":"Index","title":"Index","text":"Pages = [\n    \"functions.md\",\n]\nDepth = 1","category":"page"},{"location":"index.html#Getting-Started","page":"Index","title":"Getting Started","text":"","category":"section"},{"location":"index.html#Current-dependencies","page":"Index","title":"Current dependencies","text":"","category":"section"},{"location":"index.html","page":"Index","title":"Index","text":"RecursiveArrayTools\nDiffEqBase\nOrdinaryDiffEq\nRoots\nInterpolations\nDataFrames\nPlots\nDates\nMeasures\nCSV\nLaTeXStrings","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"Install them all with:","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"import Pkg; Pkg.add([\"RecursiveArrayTools\", \"DiffEqBase\", \"OrdinaryDiffEq\", \"Roots\", \"Interpolations\", \"DataFrames\", \"Plots\", \"Dates\", \"Measures\", \"CSV\", \"LaTeXStrings\"])","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"You can possibly also be able to run import Pkg then [dev Kelp from the directory below this repository. ","category":"page"},{"location":"index.html#Running-a-model","page":"Index","title":"Running a model","text":"","category":"section"},{"location":"index.html","page":"Index","title":"Index","text":"include(\"Kelp/src/Kelp.jl\")","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"Define the required parameters, in this example the parameters \"provided\" in Broch and Slagstad 2012. Firstly the constants:","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"offset = 4*31+28+30*2.0\nt_i = offset+12\nnd = 365+16\nlat = 60.257","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"The first, offset, is used here to align the environmental data with the start of the year. We then have t_i which is the start time in days since January 1st (of whatever year the environmental data starts). n_d is the number of days to run for and lat is latitude (used to calculate the length of the day). Next load the input data:","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"using CSV\n\ntemp_file=CSV.read(\"examples/bs2012/temp.csv\",DataFrame); sort!(temp_file); temp_t=temp_file.day; temp=temp_file.temp\nno3_file=CSV.read(\"examples/bs2012/no3.csv\",DataFrame); sort!(no3_file); no3_t=no3_file.day; no3=no3_file.no3\nirr_file=CSV.read(\"examples/bs2012/irr.csv\",DataFrame); sort!(irr_file); irr_t=irr_file.day; irr=irr_file.irr\ntemp_t .+= offset; no3_t .+= offset; irr_t .+= offset","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"The model takes interpolation objects for the environmental parameters (irradiance, temperature and nitrate concentration) so that the dates time steps vs the models can be arbitrary. They also need to be in units mol photons per square meter per day, degrees centigrade and millimoles of Nitrate per cubic meter. Generate the interpolations like this:","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"temp_arr = Interpolations.LinearInterpolation(temp_t, temp, extrapolation_bc=Flat())\nno3_arr = Interpolations.LinearInterpolation(no3_t, no3, extrapolation_bc=Flat())\nirr_arr = Interpolations.LinearInterpolation(irr_t, irr, extrapolation_bc=Flat())","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"You may not want the boundaries to extrapolate.","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"The current speed can also be time varying but to make it constant use:","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"u = 0.15\nu_arr = Interpolations.LinearInterpolation([t_i:t_i + nd;], fill(u, Int(nd + 1)))","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"Finally, define the initial conditions (a_0=initial area in dm^2, n_0=initial fraction of nitrogen reseve and c_0=initial fraction carbon reserve) and run the model:","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"a_0 = 30;n_0 = 0.01;c_0 = 0.6\n\nsolution, results = Kelp.solvekelp(t_i, nd, u_arr, temp_arr, irr_arr, no3_arr, lat, a_0, n_0, c_0, \"../src/parameters/origional.jl\")","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"Here the final parameter \"../src/parameters/origional.jl\" is specifying to use the model parameters from the 2012 paper, alternatively you can use \"../src/parameters/2013.jl\". You can also use the adjusted respiration model from the 2013 paper by adding a parameter with the value of 2.","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"The following code produces a plot of all the input and output parameters (as shown below):","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"using Plots\npyplot()\nl = @layout [[a{0.25h};b{0.25h};c{0.5h}] grid(2, 1)]\nplot(layout=l)\n\nplot!(temp_t,temp,sp=1,ylabel=L\"Temperature/$^o$C\",xlabel=\"Month\",legend=false,label=\"Temperature\")\nplt = twinx()\nplot!([no3_t[1],no3_t[1]],[no3[1]no3[1]],sp=6,label=\"Temperature\")\nplot!(no3_t,no3,sp=6,ylabel=L\"Nitrate/$\\mu$ mol / L\",legend=:right,label=\"Nitrate\")\nplot!(irr_t,irr,sp=2,ylabel=L\"Irradiance/mol photons/m$^2$/day\",legend=false,xlabel=\"Month\")\n\n# structural to dry weight conversion (paper plots g/g dry weight where as g/g structural weight is used in calculations)\nn_factor = (results.nitrogen .- N_min) .* K_N\nc_factor = (results.carbon .- C_min) .* K_C\nw_factor = 1 .+ n_factor .+ c_factor .+ C_min .+ N_min\n\nplot!(results.time,results.area,sp=3,xlabel=\"Month\", ylabel=L\"Frond Area/dm$^2$\",ylim=(29, 46),label=\"Model\",legend=false)\n\nplot!(results.time,(results.nitrogen .+ N_struct) ./ w_factor,sp=4, xlabel=\"Month\", ylabel=\"Nitrogen reserve/gN/g dw\",label=\"Model\")\n\nplot!(results.time,(results.carbon .+ C_struct) ./ w_factor,sp=5, xlabel=\"Month\", ylabel=\"Carbon reserve/gC/g dw\",label=\"Model\",legend=false)\n\nt_ticks = []\nval_ticks = []\nfor day in t_i:t_i + nd\n    date = Date(1981, 1, 1) + Dates.Day(day)\n    if Dates.format(date, \"d\") == \"1\"\n        push!(t_ticks, day)\n        push!(val_ticks, Dates.format(date, \"U\")[1])\n    end\nend\n\nplot!(xticks=(t_ticks, val_ticks))\ndisplay(display(plot!()))","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"(Image: Plot showing the inputs (irradiance, temperature, nitrate concentration) and model outputs (area, nitrogen reserve and carbon reserve).) ","category":"page"},{"location":"index.html#Model-Verification","page":"Index","title":"Model Verification","text":"","category":"section"},{"location":"index.html","page":"Index","title":"Index","text":"The models outputs compared with figure 3 in Broch and Slagstad 2012 are shown below: (Image: B&S2012 Figure 3 equivalent.) The discrepancies may be down to the inaccuracy of reporting of the model parameters or the difficulty extracting the input data from the paper. ","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"Changes to the parameters from those published are detailed here.","category":"page"}]
}
